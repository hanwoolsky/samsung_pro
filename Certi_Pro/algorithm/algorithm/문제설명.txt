/***********************************************************/
// [1-1] A0. 배열 구간의 합 구하기 => 특정 구간의 합을 물어본다.
/***********************************************************/
[문제]
N개의 1차원 배열에 수들이 입력되어 있다.
이 배열의 임의의 구간에 있는 수들의 합을 물어보는 Q개의 쿼리에 답하는 프로그램을 작성하시오.
쿼리에 답하는 중간에 배열의 어떤 원소도 값이 변경되지 않는다.

[입력]
첫째 줄에는 데이터의 수 N(1≤N≤50,000), 그리고 구해야 할 구간에 대한 정보의 수 Q(2≤Q≤200,000) 개가 주어진다.
둘째 줄에는 배열의 데이터 Di가 N개 주어진다. (1≤ Di ≤100)
셋째 줄부터 Q줄에 구간에 대한 정보가 주어진다.
각 구간에 대한 정보는 Rs, Re 총 2개의 값이 주어진다.
Rs, Re는 합을 구해야 할 구간의 시작지점과 끝 지점이다. (1≤ Rs ,Re ≤N)

[출력]
각 줄에 구간의 합에 대한 결과를 출력한다.

[후보, 시간 복잡도]
1. 구간합 loop : O(qn), q는 쿼리 개수
2. segment tree : O(nlogn) + O(qlogN), 빌드하는 시간 + 답하는 시간
3. prefix sum : O(n) + O(1), 빌드하는 시간 + 답하는 시간
=> prefix sum

[주의] - 시간 초과
1. iostream 입출력은 시간이 오래 걸림
ios_base::sync_with_stdio(false);
cin.tie(nullptr);
cout.tie(nullptr);

2. endl은 flush로 인해 시간이 걸림 => '\n'으로 사용

/***********************************************************/
// [1-2] A1. 월동 준비 => 임의 구간의 합의 최댓값을 알아야한다.
/***********************************************************/
[문제]
깊은 숲 속에 다람쥐 두 마리가 살고 있다. 숲에 겨울이 찾아오고 있다. 다람쥐들은 겨울잠을 자기 위해서 도토리를 먹어둬야 한다.
이 숲의 도토리는 하나만 먹어도 배가 부르기 때문에 겨울잠을 잘 잘 수 있다.
숲 속에 N개의 도토리가 일렬로 쭉 떨어져 있는데 맛있는 도토리도 있고 맛이 없는 도토리도 있다.
맛의 정도를 정수(-104≤정수≤104)로 나타낼 수 있다. 두 마리 다람쥐 중 한 마리는 똑똑한 다람쥐이고 다른 한 마리는 멍청한 다람쥐이다.
똑똑한 다람쥐는 맛있는 도토리만 골라 먹을 수 있다.
멍청한 다람쥐는 골라 먹을 수 없어서 임의의 위치에서 시작해서 연속해서 먹다가 임의의 위치에서 먹기를 중단 할 수 밖에 없다.
두 마리 다람쥐 모두 맛의 합이 최대가 되게 먹고 싶다.
예를 들어, 6개의 도토리가 2, -1, 2, 3, 4, -5로 주어졌을 때, 멍청한 다람쥐는 2, -1, 2, 3, 4 이렇게 도토리 5개를 연속해서 먹었을 때 맛의 합이 10으로 최대이다.
똑똑한 다람쥐는 2, 2, 3, 4 이렇게 골라먹어서 맛의 합이 11로 최대이다. 겨울잠을 자야 하므로 적어도 1개의 도토리는 반드시 먹어야 한다.
N개의 도토리가 주어졌을 때, 멍청한 다람쥐가 맛의 합이 최대가 되게 먹었을 때 값과 똑똑한 다람쥐가 맛의 합이 최대가 되게 먹었을 때 값을 찾는 프로그램을 작성하시오.

[입력]
첫 번째 줄에는 도토리의 개수 N(1≤N≤105)이 입력된다
두 번째 줄에는 N개의 도토리 정보가 공백으로 구분되어 입력된다. 도토리 정보 즉, 맛의 범위는 (-104≤맛≤104) 이다.

[출력]
멍청한 다람쥐가 먹을 때 최대합과 똑똑한 다람쥐가 먹을 때 최대합을 공백으로 구분하여 출력한다.

[주의]
1. 시간초과
다이나믹 프로그래밍을 입력하여 arr[i-1]까지의 합이 음수이면 arr[i]부터 새로 시작하고, 양수이면 arr[i]를 더한다.

2. 문제 조건
무조건 한개 이상 먹어야하므로 음수밖에 없을 때도 최솟값을 구해야한다.

3. dp[N]
flag 값을 주는 조건을 잘 설정해야한다. 양수(or 0)가 하나라도 들어왔다면 flag를 주어야한다.

/***********************************************************/
// [1-3] A2. 용액 SPJ => 임의의 두 값의 합을 알아야한다.
/***********************************************************/
[문제]
KOI 부설 과학연구소에서는 많은 종류의 산성 용액과 알칼리성 용액을 보유하고 있다. 각 용액에는 그 용액의 특성을 나타내는 하나의 정수가 주어져있다.
산성 용액의 특성 값은 1부터 1,000,000,000까지의 양의 정수로 나타내고, 알칼리성 용액의 특성 값은 -1부터 -1,000,000,000까지의 음의 정수로 나타낸다.
같은 양의 두 용액을 혼합한 용액의 특성 값은 혼합에 사용된 각 용액의 특성 값의 합으로 정의한다.
이 연구소에서는 같은 양의 두 용액을 혼합하여 특성 값이 0에 가장 가까운 용액을 만들려고 한다.
예를 들어, 주어진 용액들의 특성 값이 [-99, -2, -1, 4, 98]인 경우에는 특성 값이 -99인 용액과 특성 값이 98인 용액을 혼합하면
특성 값이 -1인 용액을 만들 수 있고, 이 용액의 특성 값이 0에 가장 가까운 용액이다.
참고로, 두 종류의 알칼리성 용액 만으로나 혹은 두 종류의 산성 용액만으로 특성 값이 0에 가장 가까운 혼합 용액을 만드는 경우도 존재할 수 있다.
산성 용액과 알칼리성 용액의 특성 값이 정렬된 순서로 주어졌을 때,
이 중 두 개의 서로 다른 용액을 혼합하여 특성 값이 0에 가장 가까운 용액을 만들어내는 두 용액을 찾는 프로그램을 작성하시오.

[입력]
첫째 줄에는 전체 용액의 수 N이 입력된다. N은 2 이상 100,000 이하의 정수이다.
둘째 줄에는 용액의 특성 값을 나타내는 N개의 정수가 빈칸을 사이에 두고 오름차순으로 입력되며, 이 수들은 모두 -1,000,000,000 이상 1,000,000,000 이하이다.
N개의 용액들의 특성 값은 모두 서로 다르고, 산성 용액 만으로나 알칼리성 용액만으로 입력이 주어지는 경우도 있을 수 있다.

[출력]
첫째 줄에 특성 값이 0에 가장 가까운 용액을 만들어내는 두 용액의 특성 값을 출력한다. 출력해야 하는 두 용액은 특성 값의 오름차순으로 출력한다.
특성 값이 0에 가장 가까운 용액을 만들어내는 경우가 두 개 이상일 경우에는 그 중 아무것이나 하나를 출력한다.

/***********************************************************/
// [1-4] A3. Best Friends
/***********************************************************/
[문제]
김철수 선생님의 반은 그의 반 N명의 학생들의 등수를 매기기 시작한 이후로 학생들 사이의 친구 관계 수가 급격히 떨어졌다.
등수 상 하위권 친구들은 상위권 학생들을 시기 했으며, 상위권 학생들은 자신의 성적을 걱정한 나머지 하위권 학생들과 친구가 되기 꺼려했기 때문이다.
김철수 선생님이 반 학생들의 친구 관계를 살펴본 결과, 친구 관계가 형성되는 중요한 규칙을 발견하였다. 바로 친구 관계의 두 친구의 등수 차이는 K 이하라는 것이다.
예를 들어 K가 1이면 서로 이웃한 등수의 사람과만 친구 관계가 형성 된다.
그런데 또 여기서 친구 관계에 있는 두 사람의 이름 길이가 같다면 두 사람은 '베프(Best Friend)'가 된다.
김철수 선생님의 학급 내 '베프' 쌍의 수를 확인하는 프로그램을 작성하라.

[입력]
입력의 첫번째 줄에는 N, K가 입력된다. (3 ≤ N ≤ 300 000, (1 ≤ K ≤ N)
다음 N줄에는 각 학생의 이름이 입력된다. 이름은 등수 순서대로 주어지며, 이름은 최소 2글자 이상 20글자 이하의 영문자 대문자로 구성된다.

[출력]
'베프' 쌍의 수를 출력한다.

[주의]
i와 p 인덱스 증가할 조건, 그에 따른 best friend 추가 로직 실수하지 않도록 조심

/***********************************************************/
// [1-5] A4. 회전 초밥
/***********************************************************/
[문제]
회전 초밥 음식점에는 회전하는 벨트 위에 여러 가지 종류의 초밥이 접시에 담겨 놓여 있고, 손님은 이 중에서 자기가 좋아하는 초밥을 골라서 먹는다.
초밥의 종류를 번호로 표현할 때, 다음 그림은 회전 초밥 음식점의 벨트 상태의 예를 보여주고 있다. 벨트 위에는 같은 종류의 초밥이 둘 이상 있을 수 있다.
새로 문을 연 회전 초밥 음식점이 불경기로 영업이 어려워서, 다음과 같이 두 가지 행사를 통해서 매상을 올리고자 한다.
1. 원래 회전 초밥은 손님이 마음대로 초밥을 고르고, 먹은 초밥만큼 식대를 계산하지만,
벨트의 임의의 한 위치부터 k개의 접시를 연속해서 먹을 경우 할인된 정액 가격으로 제공한다.
2. 각 고객에게 초밥의 종류 하나가 쓰인 쿠폰을 발행하고, 1번 행사에 참가할 경우 이 쿠폰에 적혀진 종류의 초밥 하나를 추가로 무료로 제공한다.
만약 이 번호에 적혀진 초밥이 현재 벨트 위에 없을 경우, 요리사가 새로 만들어 손님에게 제공한다.
위 할인 행사에 참여하여 가능한 한 다양한 종류의 초밥을 먹으려고 한다. 위 그림의 예를 가지고 생각해보자. k=4이고, 30번 초밥을 쿠폰으로 받았다고 가정하자.
쿠폰을 고려하지 않으면 4가지 다른 초밥을 먹을 수 있는 경우는 (9, 7, 30, 2), (30, 2, 7, 9), (2, 7, 9, 25) 세 가지 경우가 있는데,
30번 초밥을 추가로 쿠폰으로 먹을 수 있으므로 (2, 7, 9, 25)를 고르면 5가지 종류의 초밥을 먹을 수 있다. 
회전 초밥 음식점의 벨트 상태, 메뉴에 있는 초밥의 가짓수, 연속해서 먹는 접시의 개수, 쿠폰 번호가 주어졌을 때,
손님이 먹을 수 있는 초밥 가짓수의 최대값을 구하는 프로그램을 작성하시오.

[입력]
입력의 첫 번째 줄에는 회전 초밥 벨트에 놓인 접시의 수 N, 초밥의 가짓수 d, 연속해서 먹는 접시의 수 k, 쿠폰 번호 c가 각각 하나의 빈 칸을 사이에 두고 주어진다.
단, 2≤N≤3,000,000, 2≤d≤3,000, 2≤k≤3,000 (k≤N), 1≤c≤d이다.
두 번째 줄부터 개의 줄에는 벨트의 한 위치부터 시작하여 회전 방향을 따라갈 때 초밥의 종류를 나타내는 1 이상 d이하의 정수가 각 줄마다 하나씩 주어진다.

[출력]
주어진 회전 초밥 벨트에서 먹을 수 있는 초밥의 가짓수의 최대값을 하나의 정수로 출력한다.
전체 테스트 데이터의 50%는 N≤30,000.

/***********************************************************/
// [1-6] A5. 색종이(고)
/***********************************************************/
[문제]
가로, 세로의 크기가 각각 100인 정사각형 모양의 흰색 도화지가 있다.
이 도화지 위에 가로, 세로의 크기가 각각 10인 정사각형 모양의 검은색 색종이를 색종이의 변과 도화지의 변이 평행하도록 붙인다.
이러한 방식으로 색종이를 한 장 또는 여러 장 붙인 후 도화지에서 검은색 직사각형을 잘라내려고 한다.
직사각형 또한 그 변이 도화지의 변과 평행하도록 잘라내어야 한다.
검은색 색종이의 수와 각 색종이를 붙인 위치가 주어질 때 잘라낼 수 있는 검은색 직사각형의 최대 넓이를 구하는 프로그램을 작성하시오.
*주의. 직사각형은 정사각형을 포함한다.

[입력]
첫째 줄에 색종이의 수가 주어진다. 이어 둘째 줄부터 한 줄에 하나씩 색종이를 붙인 위치가 주어진다.
색종이를 붙인 위치는 두 개의 자연수로 주어지는데
첫 번째 자연수는 색종이의 왼쪽 변과 도화지의 왼쪽 변 사이의 거리이고, 두 번째 자연수는 색종이의 아래쪽 변과 도화지의 아래쪽 변 사이의 거리이다. 
색종이의 수는 100 이하이며, 색종이가 도화지 밖으로 나가는 경우는 없다.

[출력]
첫째 줄에 잘라낼 수 있는 검은색 직사각형의 최대 넓이를 출력한다.

/***********************************************************/
// [2-1] A6. 크게 만들기
/***********************************************************/
[문제]
N자리 숫자가 주어졌을 때, 여기서 숫자 K개를 지워서 얻을 수 있는 가장 큰 수를 구하는 프로그램을 작성하시오.

[입력]
첫째 줄에 N과 K가 주어진다. (1 ≤ K < N ≤ 500,000)
둘째 줄에 N자리 숫자가 주어진다. 이 수는 0으로 시작하지 않는다.

[출력]
입력으로 주어진 숫자에서 K개를 지웠을 때 얻을 수 있는 가장 큰 수를 출력한다.

/***********************************************************/
// [2-2] A7. 불쾌한 날
/***********************************************************/
[문제]
농부 희찬이의 N(1≤N≤80,000)마리의 소들은 "bad hair day"를 맞이하였다.
각 소들이 자신들의 촌스런 머리 모양을 부끄러워 하자, 희찬이는 소들이 다른 소들의 머리 모양을 얼마나 알 수 있는지를 알고자 했다.
i번째 소들은 키가 hi(1≤hi≤1,000,000,000) 이며, 동쪽(오른쪽)을 바라보고 서있다.
따라서, i번째 소는 자신의 앞 ( i+1, i+2,...)의 소들의 머리 모양만 볼 수 있으며,
앞에 자신의 키와 같거나 큰 소가 서 있을 경우 그 소의 앞에 있는 소들의 머리 모양을 볼 수 없다.

[입력]
입력은 두 줄로 이뤄지며 입력의 첫 번째 줄에는 N 이 입력된다.
그리고 그 다음 줄에는 N 개의 숫자가 주어지며, 해당 줄의 i번째 숫자는 hi를 뜻한다.

[출력]
C1 부터 CN 까지의 합을 한 줄에 하나씩 출력한다.

/***********************************************************/
// [2-3] A8. 카드 건네기
/***********************************************************/
[문제]
N장의 카드로 구성 된 카드 덱(Deck)이 있다. 이 카드는 1번 카드가 가장 위에, N번 카드가 가장 아래쪽에 있는 형태로 놓여져 있다.
이제 이 카드를 아래의 규칙에 따라서 수행하면서 한 장씩 상대방에게 전달할 것이다.

1) 가장 아래 카드 번호를 2로 나눈 몫의 정수만큼 반복하여 제일 위에 올라와 있는 카드부터 한 장씩 순서대로 가장 밑으로 옮긴다.
2) 옮긴 후 가장 위에 올라와 있는 카드 한 장을 상대에게 넘긴다.

위 1)~2) 행동을 N-1번 수행하고 마지막에는 남은 카드 한 장을 넘긴다.
위 규칙대로 카드를 넘겼을 때, 상대방에게 넘긴 카드 번호를 넘긴 순서대로 출력하시오. 

[입력]
첫 줄에 수식의 수의 갯수가 입력으로 주어진다. (1≤N≤100)

[출력]
상대방에게 넘긴 카드 번호를 넘긴 순서대로 출력하시오.

/***********************************************************/
// [2-4] A9. 프린터 큐
/***********************************************************/
[문제]
컴퓨터 과학과 학생회의 유일한 프린터는 매우 무거운 작업량을 겪고 있다.
때로는 수백 개의 작업으로 인해 한 페이지 출력을 얻으려면 몇 시간을 기다려야 할 수 있다.
일부 작업이 다른 작업보다 중요하기 때문에 학생회의 회장인 철수는 대기 열에 대한 간단한 우선 순위 시스템을 발명하고 구현했다.
이제 각 작업에 우선 순위가 1과 9 사이(9가 가장 높은 우선 순위이고 1이 가장 낮음)에서 지정된다.
 
프린터는 다음과 같이 작동한다.
 
- 대기 열의 첫 번째 작업인 J를 대기 열에서 가져옴.
- 대기 열에 작업 J보다 우선 순위가 높은 작업이 있는 경우, J를 인쇄하지 않고 대기 열 끝으로 이동 시킴.
- 그렇지 않으면 작업 J를 인쇄 함 (다시 대기 열에 넣지 않음)
 
이러한 방식의 발명으로 우선순위가 높은 중요한 문서는 매우 빨리 인쇄되지만, 중요도가 낮은 다른 문서들은 인쇄되기까지 꽤 오래 기다려야 할 수 도 있다.
위 방법으로 프린터가 작동할 때, 현재 대기 열에 있는 문서의 수와 우선순위가 주어졌을 때, 어떤 한 문서가 몇 번째 순서로 인쇄되는지 출력하는 프로그램을 작성하자.

[입력]
첫 줄에 test case의 수가 주어진다.
각 test case에 대해서 문서의 수 N(<=100)와 몇 번째로 인쇄 될지 궁금한 문서의 현재 대기 열 상 위치인 M(0 <= M < N)이 주어진다.
다음 줄에 N개 문서의 우선순위가 주어진다. ( 범위 : 1~9 ) 중요도가 같은 문서가 여러 개 있을 수도 있다. 

[출력]
각 test case에 대해 문서가 몇 번째로 인쇄되는지 출력한다.

/***********************************************************/
// [2-5] A10. 히스토그램에서 가장 큰 직사각형
/***********************************************************/
[문제]
히스토그램은 직사각형 여러 개가 아래쪽으로 정렬되어 있는 도형이다. 각 직사각형은 같은 너비를 가지고 있지만, 높이는 서로 다를 수도 있다.
히스토그램에서 가장 큰 직사각형을 구하는 프로그램을 작성하시오.

[입력]
입력은 테스트 케이스 여러 개로 이루어져 있다.
각 테스트 케이스는 한 줄로 이루어져 있고, 직사각형의 수 n이 가장 처음으로 주어진다. (1 ≤ n ≤ 100,000)
그 다음 n개의 정수 h1, ..., hn (0 ≤ hi ≤ 1,000,000,000)가 주어진다.
이 숫자들은 히스토그램에 있는 직사각형의 높이이며, 왼쪽부터 오른쪽까지 순서대로 주어진다.
모든 직사각형의 너비는 1이고, 입력의 마지막 줄에는 0이 하나 주어진다.

[출력]
각 테스트 케이스에 대해서, 히스토그램에서 가장 큰 직사각형의 넓이를 출력한다.

/***********************************************************/
// [3-1] B1. 도약
/***********************************************************/
[문제]
개구리가 연못 위에서 놀고 있다. 개구리는 N개의 연 잎 들을 이용해서 이리저리 뛰어 놀고 있다.
개구리가 뛰는 장면을 보던 철수는 개구리가 도약을 하는 경우가 얼마나 있는지 궁금해졌다. 여기서 도약은 아래 조건을 만족하는 경우를 말한다.
 
1. 개구리가 뛴 거리가 이전에 뛴 거리 이상 뛰지만 그 2배보다 멀리 뛰지는 않는다.
2. 개구리는 오른쪽으로만 뛴다.
3. 개구리는 두 번만 뛴다.
4. 위 세 가지 조건을 만족한다면 어느 곳에서든 시작할 수 있다.
 
허나, 연 잎 들이 너무 많기 때문에 가능한 횟수가 매우 많아질 것 같다고 생각한 철수는, 개구리가 오른쪽으로 도약하는 경우가 얼마나 되는지 구해달라고 했다.
철수를 위해 프로그램을 짜주자.

[입력]
첫 번째 줄에는 연 잎의 수 N(3 ≤ N ≤ 1,000)이 주어진다.
두 번째 줄부터 N개의 줄에는 각 연 잎의 좌표가 주어진다. 모든 좌표는 0 이상 108 이하이다.

[출력]
개구리가 오른쪽으로 도약하는 경우의 수를 출력한다.

/***********************************************************/
// [3-2] B2. 사냥꾼
/***********************************************************/
[문제]
KOI 사냥터에는 N 마리의 동물들이 각각 특정한 위치에 살고 있다. 사냥터에 온 사냥꾼은 일직선상에 위치한 M 개의 사대(총을 쏘는 장소)에서만 사격이 가능하다.
편의상, 일직선을 x-축이라 가정하고, 사대의 위치 x1, x2, ... xM 은 x-좌표 값이라고 하자.
각 동물이 사는 위치는 (a1, b1), (a2, b2), ..., (aN, bN) 과 같이 x, y-좌표 값으로 표시하자. 동물의 위치를 나타내는 모든 좌표 값은 양의 정수이다. 
사냥꾼이 가지고 있는 총의 사정거리가 L 이라고 하면, 사냥꾼은 한 사대에서 거리가 L 보다 작거나 같은 위치의 동물들을 잡을 수 있다고 한다.
단, 사대의 위치 xi와 동물의 위치 (aj,bj) 간의 거리는 |xi-aj| + bj 로 계산한다.
사대의 위치와 동물들의 위치가 주어졌을 때, 잡을 수 있는 동물의 수를 출력하는 프로그램을 작성하시오.

[입력]
입력의 첫 줄에는 사대의 수 M(1≤M≤100,000) 동물의 수 N(1≤N≤100,000), 사정거리 L(1≤L≤1,000,000,000)이 빈칸을 사이에 두고 주어진다.
두 번째 줄에는 사대의 위치를 나타내는 M개의 x-좌표 값이 빈칸을 사이에 두고 양의 정수로 주어진다.
이후 N 개의 각 줄에는 각 동물의 사는 위치를 나타내는 좌표 값이 x-좌표 값, y-좌표 값의 순서로 빈칸을 사이에 두고 양의 정수로 주어진다.
사대의 위치가 겹치는 경우는 없으며, 동물들의 위치가 겹치는 경우도 없다. 모든 좌표 값은 1,000,000,000 보다 작거나 같은 양의 정수이다.

[출력]
출력은 단 한 줄이며, 잡을 수 있는 동물의 수를 음수가 아닌 정수로 출력한다.

/***********************************************************/
// [3-3] B3. 예산
/***********************************************************/
[문제]
국가의 역할 중 하나는 여러 지방의 예산요청을 심사하여 국가의 예산을 분배하는 것이다.
국가예산의 총액은 미리 정해져 있어서 모든 예산요청을 배정해 주기는 어려울 수도 있다.
그래서 정해진 총액 이하에서 가능한 한 최대의 총 예산을 다음과 같은 방법으로 배정한다.
 
(1) 모든 요청이 배정될 수 있는 경우에는 요청한 금액을 그대로 배정한다.
(2) 모든 요청이 배정될 수 없는 경우에는 특정한 정수 상한액을 계산하여 그 이상인 예산요청에는 모두 상한액을 배정한다.
상한액 이하의 예산요청에 대해서는 요청한 금액을 그대로 배정한다.
 
예를 들어, 전체 국가예산이 485이고 4개 지방의 예산요청이 각각 120, 110, 140, 150이라고 하자.
이 경우, 상한액을 127로 잡으면, 위의 요청들에 대해서 각각 120, 110, 127, 127을 배정하고 그 합이 484로 가능한 최대가 된다.
 
여러 지방의 예산요청과 국가예산의 총액이 주어졌을 때, 위의 조건을 모두 만족하도록 예산을 배정하는 프로그램을 작성하시오.

[입력]
첫째 줄에는 지방의 수를 의미하는 정수 N이 주어진다. N은 3 이상 10,000 이하이다.
다음 줄에는 각 지방의 예산요청을 표현하는 N개의 정수가 빈칸을 사이에 두고 주어진다. 이 값들은 모두 1 이상 100,000 이하이다.
그 다음 줄에는 총 예산을 나타내는 정수 M이 주어진다. M은 N이상 1,000,000,000 이하이다.

[출력]
배정된 예산들 중 최대값인 정수를 출력한다.

/***********************************************************/
// [3-4] B4. 어민
/***********************************************************/
[문제]
한 작은 나라에서는 대부분의 시민들이 어부이며, 그 나라의 모든 마을은 직선 해변을 따라 건설된 직선 도로에 위치해 있다.
마을의 어부들은 엄청난 양의 물고기를 잡았으나 예전처럼 물고기를 좋아하지 않아서 이웃 나라의 가난하고 배고픈 아이들을 입양하기로 결정했다.
하나의 긴 직선 도로가 해변을 따라 모든 마을을 연결한다. 따라서 각 도시(첫 번째와 마지막 도시는 제외)는 두 이웃 마을에 직접 연결된다.
1년에 한 명의 어린이가 1톤의 물고기를 먹는다. 어떤 마을에서 잡힌 물고기의 양은 그 마을에서 먹거나 다른 마을로 옮길 수 있다.
도로를 이용해서 옮겨야 하는데 이용에 따른 세금이 부과된다. 1km당 1톤의 물고기를 세금으로 내야 한다.
각 마을마다 동등한 수의 가난한 아이들이 입양되기를 원한다. 각 마을에 수용될 수 있는 아이들의 최대 수를 결정하는 프로그램을 작성하시오.
모든 물고기가 잡히고 저렴하게 운반된 물고기를 먹을 수 있다는 조건이다.

[입력]
첫 번째 줄에는 마을 수 N(1≤N≤100,000, 정수)이 입력된다
두 번째 줄부터 N줄에 걸쳐 마을 정보가 입력된다. 마을 정보는 두 개의 정수A, B이며 공백으로 구분되어 입력된다.
A는 도시의 위치이며 B는 잡힌 물고기 양이다. (1≤A≤1,000,000,000, 단위는 km) (0≤B≤1,000,000,000, 단위는 톤)
마을 정보는 도로 위치에 따라 오름차순으로 정렬되어 입력된다.

[출력]
각 마을에 동일한 수로 입양될 수 있는 최대 아이들 수를 출력하라

/***********************************************************/
// [3-5] B5. 사회적 거리두기
/***********************************************************/
[문제]
농부 John은 전염성이 높은 COWVID-19이 발생한 이후, 소들의 건강이 걱정되었다. 
병의 전염을 막기 위해서, 농부 John의 N마리 소들은 '사회적 거리두기'를 실행하기로 결정하고 농장 전체에 흩어졌다. (2<=N<=105)
농부 John의 농장은 1차원 직선의 모양으로, M개의 서로 분리된 구간의 방목할 잔디가 구성되어 있다. (1<=M<=105)
소는 D의 값을 최대화하기 위해 각각 잔디구간의 정수 지점에 위치하려고 한다. 여기서 D는 가장 가까운 소 두 마리 사이의 거리를 말한다.
소가 D의 가능한 가장 큰 값을 가질수 있도록 도와주자.

[입력]
첫째 줄에는 N과 M이 주어진다. (2<=N<=105, 1<=M<=105)
다음 M개 줄에는 잔디 구간을 나타내는 두개의 정수 a,b가 주어진다.(0<=a<=b<=1018)
구간이 겹치거나 같은 지점에서 만나는 경우는 존재하지 않는다. 그리고 소들은 각 구간의 끝지점에도 서있을 수 있다.

[출력]
가능 최대값 D를 출력하라. 모든 소들의 쌍은 D이상 떨어져 있어야 한다.
모든 입력은 0보다 큰 D값이 항상 존재한다.

/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]
한 줄로 된 간단한 에디터를 구현하려고 한다. 이 편집기는 영어 소문자만을 기록할 수 있는 편집기로, 최대 600,000글자까지 입력할 수 있다.
이 편집기에는 '커서'라는 것이 있는데, 커서는 문장의 맨 앞(첫 번째 문자의 왼쪽), 문장의 맨 뒤(마지막 문자의 오른쪽),
또는 문장 중간 임의의 곳(모든 연속된 두 문자 사이)에 위치할 수 있다. 즉 길이가 L인 문자열이 현재 편집기에 입력되어 있으면,
커서가 위치할 수 있는 곳은 L+1가지 경우가 있다.

이 편집기가 지원하는 명령어는 다음과 같다.
L	커서를 왼쪽으로 한 칸 옮김 (커서가 문장의 맨 앞이면 무시됨)
D	커서를 오른쪽으로 한 칸 옮김 (커서가 문장의 맨 뒤이면 무시됨)
B	커서 왼쪽에 있는 문자를 삭제함 (커서가 문장의 맨 앞이면 무시됨)
P $ $라는 문자를 커서 왼쪽에 추가함

초기에 편집기에 입력되어 있는 문자열이 주어지고, 그 이후 입력한 명령어가 차례로 주어졌을 때,
모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 구하는 프로그램을 작성하시오.
단, 명령어가 수행되기 전에 커서는 문장의 맨 뒤에 위치하고 있다고 한다.

[입력]
첫째 줄에는 초기에 편집기에 입력되어 있는 문자열이 주어진다. 이 문자열은 영어 소문자로만 이루어져 있으며, 길이는 100,000을 넘지 않는다.
둘째 줄에는 입력할 명령어의 개수를 나타내는 정수 N(1≤N≤500,000)이 주어진다.
셋째 줄부터 N개의 줄에 걸쳐 입력할 명령어가 순서대로 주어진다. 명령어는 위의 네 가지 중 하나의 형태로만 주어진다.

[출력]
첫째 줄에 모든 명령어를 수행하고 난 후 편집기에 입력되어 있는 문자열을 출력한다.

/***********************************************************/
// [4-2] B7. 메모리 관리 함수
/***********************************************************/
[문제]
메모리는 100,000개의 연속된 공간이고, 1번부터 100,000번까지 번호가 매겨져 있다. 제일 처음에 모든 공간은 할당되지 않은 상태이다.
명령어의 종류는 다음 중 하나이다.
1. var=malloc(size);	이 함수는 처음 등장하는 size개의 연속된 공간을 찾아, 할당해주는 함수이다.
						이 함수의 리턴값은 할당된 공간의 제일 처음 주소이다. 만약, 할당해줄 수 있는 공간이 없다면 0을 리턴한다.
2. free(var);			이 함수는 이전에 malloc을 통해 var에 할당된 공간을 할당 해제시켜주고, var에 0을 저장하는 함수이다.
						만약, var가 이미 0이라면, 아무 일도 일어나지 않는다.
3. print(var);			var에 저장된 값을 출력하는 함수이다.
모든 명령은 세미콜론(';')으로 끝난다. 변수는 알파벳 소문자로 이루어져 있으며, 항상 네글자이다.
서로 다른 변수의 개수는 1,000개보다 작거나 같다. 모든 변수는 0으로 초기화되어있다.

[입력]
첫째 줄에 명령의 개수 N이 주어진다. (1 ≤ N ≤ 100,000)
다음 N개의 줄에는 명령이 수행된 순서 대로 하나씩 주어진다. 적어도 하나의 명령은 print이다.

[출력]
print가 나올 때 마다 결과를 한 줄에 하나씩 출력한다.

/***********************************************************/
// [4-3] B8. 개구리 공주
/***********************************************************/
[문제]
트럭을 타고 이동하던 중에 장국영은 휴식을 취하기 위해서 호수에 잠시 들렸다. 호수에는 개구리가 살고 있고, 개구리는 호수 위에 떠있는 식물 N개를 점프하면서 다닌다.
오래된 전설에 따르면 개구리에게 키스를 하면 개구리는 아름다운 공주로 변한다고 한다. 일단 개구리를 잡아야 전설이 사실인지 아닌지 확인할 수 있다. 개구리를 잡아보자.
호수는 2차원 평면으로 생각할 수 있고, 식물은 그 평면 위의 점으로 나타낼 수 있다. (x, y)위에 있는 개구리는 아래 네 가지 방향 중 한 방향으로 점프할 수 있다.
1. 임의의 양의 정수 P에 대해서, (x+P, y+P)로 점프할 수 있다. 이 방향을 A라고 한다.
2. 임의의 양의 정수 P에 대해서, (x+P, y-P)로 점프할 수 있다. 이 방향을 B라고 한다.
3. 임의의 양의 정수 P에 대해서, (x-P, y+P)로 점프할 수 있다. 이 방향을 C라고 한다.
4. 임의의 양의 정수 P에 대해서, (x-P, y-P)로 점프할 수 있다. 이 방향을 D라고 한다.
개구리는 네 방향 중 한 방향을 고른다. 그 다음 그 방향에 있는 가장 가까운 식물로 점프를 한다.
만약, 고른 방향에 식물이 없다면, 개구리는 그 위치에 그대로 있는다. 개구리가 점프를 하고 난 이후에, 원래 있던 식물은 호수로 가라 앉게 되고 사라진다.
장국영은 식물의 위치와 개구리가 고른 방향을 모두 알고 있다. 장국영은 개구리의 점프가 끝나는 곳의 좌표를 알아낸 다음, 거기서 개구리를 잡으려고 한다.
개구리의 점프가 끝나는 식물의 위치는 어디일까?

[입력]
첫째 줄에 식물의 수 N과 점프의 수 K가 주어진다. (1 ≤ N, K ≤ 100,000)
둘째 줄에는 개구리가 고른 방향 K개가 주어진다. 이 방향은 'A','B','C','D'로만 이루어져 있다.
셋째 줄부터 N개 줄에는 식물의 좌표가 X, Y가 주어진다. (0 ≤ X, Y ≤ 1,000,000,000) 처음으로 주어지는 식물에 개구리가 있다.

[출력]
개구리의 점프가 끝나는 식물의 좌표를 출력한다.

/***********************************************************/
// [5-1] C0. 최소 비용으로 포장 다시하기
/***********************************************************/
[문제]
사탕 공장에서는 요구에 따라 다양한 개수의 사탕을 담고 있는 포장을 하고 있다.
어느 날 갑자기 대형 이벤트가 생겨서 공장에 있는 모든 사탕들을 풀어서 하나로 포장 해야 한다.
A, B, C 3개의 사탕 포장이 있을 때 이 포장들을 한번에 하나로 합칠 수는 없고, 한번에 2개씩만 합칠 수 있다.
예를 들면 A와 B를 먼저 합친 후 C를 다시 합치거나 A와 C를 먼저 합치고 B를 합치기, 혹은 B와 C를 먼저 합치고 A를 합칠 수 있다.
사탕 포장을 풀었다가 다시 합치는 순서는 매우 중요한데, 그 이유는 그 순서에 따라 전체 비용이 달라지기 때문이다.
사탕 포장 A와 B에 각각 a개와 b개의 사탕이 들어있다고 할 때 이 둘을 합치는 비용은 a + b라고 한다.
그러므로 A와 B를 먼저 합치고 C를 합치는 경우 그 전체 비용은 a + b + a + b + c이며,
B와 C를 먼저 합치고 A를 합치는 비용은 b + c + b + c + a 이므로 그 둘은 서로 같지 않을 수 있다.
예를 들어, 각각 2, 2, 5개가 포장되어 있다면 A(2)와 B(2)를 합치는 비용은 4. 합쳐진 것(4)과 C(5)를 합치는 비용은 9로 총 13이 최소비용이다.
현재 공장에 포장되어 있는 포장 개수 N과 각각 포장에 들어있는 사탕의 개수 ni가 주어질 때, 이들을 하나로 합치는데 들어가는 비용의 최소(C)를 구하라.

[입력]
첫 번째 줄에는 포장 개수 N(1<=N<=5000)이 주어진다.
두 번째 줄에는 포장에 들어있는 사탕의 개수 ni(1<=ni<=100)가 주어진다.

[출력]
최소 비용을 출력한다.

/***********************************************************/
// [5-2] C1. 중앙값
/***********************************************************/
[문제]
어떤 수들을 오름차순(혹은 내림차순)으로 정렬했을 때 가운데에 오는 값을 그 수들의 중앙값이라고 부른다.
문제에서는 총 N개의 정수가 주어진다.
최초에 1개의 수가 주어질 것이고, 그  이후부터는 2개씩 정수가 주어질것이다.
수가 주어질때마다 지금까지 주어진 모든 숫자들 중 중앙값 수를 출력하는 프로그램을 작성하라.

예를 들어, N=7이고,  주어질 정수는 1, 2, 3, 4, 5, 6, 7 이라 하자.
처음에는 정수 5를, 그 뒤로 (1, 2), (7, 4), (6, 3)의 순서대로 정수가 주어졌다고 한다면 결과는 다음과 같다.
 
[1회] 5 -> 중앙값 : 5
[2회] 1 2 5 -> 중앙값 : 2
[3회] 1 2 4 5 7 -> 중앙값 : 4
[4회] 1 2 3 4 5 6 7 -> 중앙값 : 4


[입력]
입력의 첫 줄에는 N(3≤N＜20,000, 홀수)이 주어지며, 둘째 줄에는 정수 1개가 주어진다.
세 번째 줄부터 (N-1)/2 개의 줄에는 각각 두 개의 정수 P, Q가 주어진다.
입력되는 모든 수는 -100000 이상 100000 이하의 정수이다.

[출력]
출력은 총 (N+1)/2 줄로 구성되어 있어야 하며 각 줄마다 해당하는 시행까지 
주어진 모든 정수들의 중앙값을 출력한다.

/***********************************************************/
// [5-3] C2. 컴퓨터실
/***********************************************************/
[문제]
컴퓨터 실습실에는 총 M대의 컴퓨터가 일렬로 놓여있다. 이 컴퓨터는 왼쪽에 있는 것부터 순서대로 1~M의 번호가 매겨져 있다.
현재, 이 실습실에는 총 N명의 학생들이 이미 앉아있으며, 각각 들어온 순서에 따라 A1, A2, ..., AN번 컴퓨터 앞에 앉아있다.
곧 있으면 자습시간이 시작되기 때문에 총 M-N명의 학생이 더 와서 컴퓨터를 사용할 것이다.
각 학생들은 다른 학생이 자기 컴퓨터의 모니터를 보는 것을 싫어하므로 다음과 같은 방법으로 자리를 잡을 것이다.
1. 우선 학생이 없는 연속한 컴퓨터들의 그룹 중 가장 컴퓨터가 많은 그룹을 선택한다. 만약 이런 그룹이 여러 개라면 가장 왼쪽에 있는 그룹을 선택한다.
2. 그 다음, 선택한 그룹의 컴퓨터들 중 정 중앙에 있는 컴퓨터를 선택하여 자리를 잡는다.
만약 학생이 선택한 그룹의 컴퓨터가 짝수개인 경우 정 중앙 2개의 컴퓨터 중 왼쪽에 있는 컴퓨터에 자리를 잡는다.
정환이는 Q명의 친구들과 함께 팀 프로젝트를 해야 하기 때문에 Q명의 친구들이 어디에 앉을 지 알아야 한다.
다행히 정환이는 각 친구가 몇 번째로 실습실에 들어갔는지 알고 있다. 정환이를 도와 각 친구들의 위치를 구하시오.

[입력]
첫 번째 줄에는 컴퓨터의 수 M, 이미 자리를 잡은 학생의 수 N, 친구의 수 Q가 주어진다.
두 번째 줄에는 N개의 정수가 주어지는데, 이 값은 자리를 잡은 학생의 위치 Ai를 나타낸다.
이미 자리를 잡은 학생들은 앞서 말한 방법으로 자리를 잡지 않았을 수도 있음에 유의하여라.
세 번째 줄에는 Q개의 정수가 주어지는데, 이 값은 각 친구가 실습실에 들어간 순서 Bi를 의미한다. (이미 자리를 잡은 학생들 N명 중 정환이의 친구가 있을 수도 있다.)
(1 ≤ A1 < A2 < . . . < AN ≤ M),  (1 ≤ B1 < B2 < . . . < BQ ≤ M)
(1 ≤ Q ≤ 105),  (Q, N ≤ M), (1 ≤ N ≤ 105), 1 ≤ M ≤ 3*105

[출력]
출력은 총 Q개의 줄로 이루어진다. i번째 줄에는 i번째 친구가 자리잡은 컴퓨터의 번호를 출력한다. 

/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]

[입력]

[출력]

/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]

[입력]

[출력]


/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]

[입력]

[출력]

/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]

[입력]

[출력]

/***********************************************************/
// [4-1] B6. 에디터
/***********************************************************/
[문제]

[입력]

[출력]